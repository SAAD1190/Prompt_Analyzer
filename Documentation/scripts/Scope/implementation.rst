Overview
========================

.. figure:: /Documentation/images/architecture.png
   :width: 700
   :align: center
   :alt: Image explaining RAG architecture

--------------------------------------------------------------
This section provides details on implementing RAG for French, Arabic, and English.

Multilingual Chatbot Implementation details
================================

This application is a multilingual chatbot built using **Streamlit** and integrates **LangChain**, **FAISS**, and **Chroma** to provide document-based retrieval-augmented generation (RAG) capabilities.

Highlights
----------

- **Multilingual Support**: Supports English, Arabic, and French.
- **Interactive Interfaces**: Built using frameworks like Streamlit.
- **Document Retrieval**: Handles PDF uploads and processes content for retrieval in three languages.
- **Dynamic Embedding**: Utilizes FAISS for Arabic and Chroma for English and French.


Prerequisites
-------------

- **Install Ollama Server**: Ensure that the Ollama server is installed and running on your local machine. This is essential for embedding generation and model execution.
  - Visit the official Ollama documentation for installation instructions.

- **Download Required Models**: Use the `ollama` command-line tool to download the necessary models, such as `mistral`. Example:
   ```
   ollama download mistral
   ```
This ensures that the required models are available locally for processing English and French documents.

- **Python Environment**: Ensure all required Python packages are installed: pip install streamlit PyPDF2 langchain faiss-cpu sentence-transformers

- **Start Ollama Server**: Run the Ollama server before launching the chatbot:


These steps must be completed before using the chatbot to ensure smooth operation and model availability.

Architecture Overview
----------------------

The chatbot application follows a modular architecture as detailed below:

1. **Dependencies**
   - Key libraries include:
     - `Streamlit` for the user interface.
     - `FAISS` for fast similarity searches in Arabic text.
     - `Chroma` for embedding-based retrieval in English and French.
     - `SentenceTransformer` and `OllamaEmbeddings` for text embeddings.

2. **Embedding Models**
   - **Arabic**: SentenceTransformer `"paraphrase-multilingual-MiniLM-L12-v2"` for Arabic text embeddings with FAISS indexing.
   - **English and French**: Ollama embeddings (`"llama3.1"`) for Chroma vector storage.

3. **Frontend (Streamlit)**
   - Multilingual interface with language-specific labels and settings.
   - File uploader supporting multiple PDF files.
   - Text input for user queries.

4. **Backend (Retrieval-Augmented Generation)**
   - **Text Processing**:
     - Uses `RecursiveCharacterTextSplitter` to divide document content into manageable chunks.
   - **Document Storage**:
     - Arabic documents are indexed in FAISS.
     - English and French documents are stored in Chroma's persistent database.
   - **Query Processing**:
     - Arabic: FAISS index retrieves the most relevant document chunks.
     - English/French: Chroma retriever fetches document embeddings, and Llama models generate answers.

5. **Main Functionalities**
   - **Upload and Indexing**:
     - PDFs are processed to extract text and split into smaller chunks for indexing.
     - Documents are stored in FAISS (Arabic) or Chroma (English/French).
   - **Query Answering**:
     - Answers are generated by retrieving relevant content and running it through an LLM (for English/French).
   - **Language-Specific Adaptations**:
     - Arabic queries use FAISS with SentenceTransformer.
     - English/French queries use Chroma and a selected Llama model.

Code Walkthrough
----------------

**1. Embedding Initialization**

- Arabic embeddings:
  - Model: `"paraphrase-multilingual-MiniLM-L12-v2"`
  - FAISS indexing: `faiss.IndexFlatL2`

- English/French embeddings:
  - Model: `"llama3.1"`
  - Chroma persistent directory: `./RAG/chroma_db`

**2. User Interface**

- Language selection: Sidebar allows switching between English, Arabic, and French.
- File uploader: Supports multiple PDF uploads for document retrieval.

**3. Document Processing**

- **PDF Text Extraction**:
  - Extracts text from uploaded PDFs using `PyPDF2`.
- **Text Splitting**:
  - Splits extracted text into chunks with `RecursiveCharacterTextSplitter`.

**4. Retrieval-Augmented Generation**

- Arabic queries:
  - Uses FAISS index to find top-5 relevant document chunks.
- English/French queries:
  - Uses Chroma retriever and selected Llama model (`"llama3.1"` or `"llama3.2:1b"`).

**5. Answer Generation**

- Arabic: Displays document text chunks retrieved by FAISS.
- English/French: Uses LangChain's retrieval chain to generate answers.

**6. Error Handling**

- Handles errors during file upload, document processing, and query answering.
- Displays language-specific error messages.

Usage
-----

**1. Select Language**
   - Choose a language (English, Arabic, or French) from the sidebar.

**2. Upload Documents**
   - Upload PDF files using the sidebar uploader.
   - Files are processed and indexed based on the selected language.

**3. Ask Questions**
   - Enter a query in the text input field and click "Get Answer."
   - Receive answers based on the retrieved document content.

Technical Requirements
-----------------------

- **Python Packages**:
  - `Streamlit`
  - `PyPDF2`
  - `faiss`
  - `sentence-transformers`
  - `langchain`

- **Hardware**:
  - Recommended: GPU-enabled machine for efficient embedding and retrieval.

- **Server Configuration**:
  - Llama base URL: `http://127.0.0.1:11434`
  - Persistent directory for Chroma: `./RAG/chroma_db`

